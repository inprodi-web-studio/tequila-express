// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uEWT1C6ySrjtSMWJntBego
// Component: wtnE0On9QToy
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuLink from "../../MenuLink"; // plasmic-import: QGAZksd0OJe_/component
import { useScreenVariants as useScreenVariantsraGa2MJbEFd } from "../website_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: RaGa2M-JbEFd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../website_starter/plasmic.module.css"; // plasmic-import: uEWT1C6ySrjtSMWJntBego/projectcss
import sty from "./PlasmicMainHeader.module.css"; // plasmic-import: wtnE0On9QToy/css

createPlasmicElementProxy;

export const PlasmicMainHeader__VariantProps = new Array();

export const PlasmicMainHeader__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsraGa2MJbEFd()
  });
  return (
    <div
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.header
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"183px"}
        loading={"lazy"}
        onClick={async event => {
          const $steps = {};
          $steps["goToInicio"] = true
            ? (() => {
                const actionArgs = { destination: `/` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToInicio"] != null &&
            typeof $steps["goToInicio"] === "object" &&
            typeof $steps["goToInicio"].then === "function"
          ) {
            $steps["goToInicio"] = await $steps["goToInicio"];
          }
        }}
        src={{
          src: "/plasmic/tequila_express/images/logoTequilapng.png",
          fullWidth: 1332,
          fullHeight: 196,
          aspectRatio: undefined
        }}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"menu"}
        data-plasmic-override={overrides.menu}
        hasGap={true}
        className={classNames(projectcss.all, sty.menu)}
      >
        <MenuLink
          className={classNames("__wab_instance", sty.menuLink__uG8Ho)}
          label={"Inicio"}
          onClick={async () => {
            const $steps = {};
            $steps["goToInicio"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToInicio"] != null &&
              typeof $steps["goToInicio"] === "object" &&
              typeof $steps["goToInicio"].then === "function"
            ) {
              $steps["goToInicio"] = await $steps["goToInicio"];
            }
          }}
        />

        <MenuLink
          className={classNames("__wab_instance", sty.menuLink__lhhH2)}
          label={"Nosotros"}
          onClick={async () => {
            const $steps = {};
            $steps["goToNosotros"] = true
              ? (() => {
                  const actionArgs = { destination: `/nosotros` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToNosotros"] != null &&
              typeof $steps["goToNosotros"] === "object" &&
              typeof $steps["goToNosotros"].then === "function"
            ) {
              $steps["goToNosotros"] = await $steps["goToNosotros"];
            }
          }}
        />

        <MenuLink
          className={classNames("__wab_instance", sty.menuLink__fRxeX)}
          label={"Viaja en Tren"}
          onClick={async () => {
            const $steps = {};
            $steps["goToViajarEnTren"] = true
              ? (() => {
                  const actionArgs = { destination: `/viajar-en-tren` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToViajarEnTren"] != null &&
              typeof $steps["goToViajarEnTren"] === "object" &&
              typeof $steps["goToViajarEnTren"].then === "function"
            ) {
              $steps["goToViajarEnTren"] = await $steps["goToViajarEnTren"];
            }
          }}
        />

        <MenuLink
          className={classNames("__wab_instance", sty.menuLink__j56Ok)}
          label={"Recorridos"}
        />

        <MenuLink
          className={classNames("__wab_instance", sty.menuLink___7UJ5)}
          label={"Contacto"}
          onClick={async () => {
            const $steps = {};
            $steps["goToContacto"] = true
              ? (() => {
                  const actionArgs = { destination: `/contacto` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToContacto"] != null &&
              typeof $steps["goToContacto"] === "object" &&
              typeof $steps["goToContacto"].then === "function"
            ) {
              $steps["goToContacto"] = await $steps["goToContacto"];
            }
          }}
        />
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  header: ["header", "img", "menu"],
  img: ["img"],
  menu: ["menu"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainHeader__ArgProps,
          internalVariantPropNames: PlasmicMainHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicMainHeader";
  } else {
    func.displayName = `PlasmicMainHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicMainHeader = Object.assign(
  // Top-level PlasmicMainHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    menu: makeNodeComponent("menu"),
    // Metadata about props expected for PlasmicMainHeader
    internalVariantProps: PlasmicMainHeader__VariantProps,
    internalArgProps: PlasmicMainHeader__ArgProps
  }
);

export default PlasmicMainHeader;
/* prettier-ignore-end */

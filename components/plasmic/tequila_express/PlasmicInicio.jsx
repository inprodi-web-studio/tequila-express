// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uEWT1C6ySrjtSMWJntBego
// Component: am31UqG5ApzN
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MainHeader from "../../MainHeader"; // plasmic-import: wtnE0On9QToy/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Button2 from "../../Button2"; // plasmic-import: 48nEEeCzck2s/component
import Footer from "../../Footer"; // plasmic-import: Iz_Y_kKZMHTD/component
import { useScreenVariants as useScreenVariantsraGa2MJbEFd } from "../website_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: RaGa2M-JbEFd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../website_starter/plasmic.module.css"; // plasmic-import: uEWT1C6ySrjtSMWJntBego/projectcss
import sty from "./PlasmicInicio.module.css"; // plasmic-import: am31UqG5ApzN/css

createPlasmicElementProxy;

export const PlasmicInicio__VariantProps = new Array();

export const PlasmicInicio__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInicio__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1",
        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "mainHeader.menuOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "menuOpened",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsraGa2MJbEFd()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <MainHeader
            data-plasmic-name={"mainHeader"}
            data-plasmic-override={overrides.mainHeader}
            className={classNames("__wab_instance", sty.mainHeader)}
            menuOpen={generateStateValueProp($state, [
              "mainHeader",
              "menuOpen"
            ])}
            onMenuOpenChange={generateStateOnChangeProp($state, [
              "mainHeader",
              "menuOpen"
            ])}
          />

          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: true,
              autoplaySpeed: 5000,
              beforeChange: generateStateOnChangePropForCodeComponents(
                $state,
                "currentSlide",
                ["sliderCarousel", "currentSlide"],
                SliderWrapper_Helpers
              ),
              centerMode: false,
              className: classNames("__wab_instance", sty.sliderCarousel),
              dots: false,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              pauseOnHover: false,
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"]
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],

              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div
                  data-plasmic-name={"slide2"}
                  data-plasmic-override={overrides.slide2}
                  className={classNames(projectcss.all, sty.slide2)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6Fvp9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rxMkB
                      )}
                    >
                      {"Convierte el trayecto en \nparte de tu destino"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bXg7J
                      )}
                    >
                      {
                        "Descubre la esencia de Jalisco entre rieles y ra\u00edces. Emprende un viaje inolvidable a bordo del tren tur\u00edstico a Tequila."
                      }
                    </div>
                  </Stack__>
                </div>
                <div
                  data-plasmic-name={"slide1"}
                  data-plasmic-override={overrides.slide1}
                  className={classNames(projectcss.all, sty.slide1)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rjZir)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gJpEt
                      )}
                    >
                      {"Convierte el trayecto en \nparte de tu destino"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h6Hm
                      )}
                    >
                      {
                        "Descubre la esencia de Jalisco entre rieles y ra\u00edces. Emprende un viaje inolvidable a bordo del tren tur\u00edstico a Tequila."
                      }
                    </div>
                  </Stack__>
                </div>
                <div
                  data-plasmic-name={"slide3"}
                  data-plasmic-override={overrides.slide3}
                  className={classNames(projectcss.all, sty.slide3)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__le7Gj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wmrPc
                      )}
                    >
                      {"Convierte el trayecto en \nparte de tu destino"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ohS
                      )}
                    >
                      {
                        "Descubre la esencia de Jalisco entre rieles y ra\u00edces. Emprende un viaje inolvidable a bordo del tren tur\u00edstico a Tequila."
                      }
                    </div>
                  </Stack__>
                </div>
              </SliderWrapper>
            );
          })()}
          <Stack__
            as={"div"}
            data-plasmic-name={"stats"}
            data-plasmic-override={overrides.stats}
            hasGap={true}
            className={classNames(projectcss.all, sty.stats)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"left"}
              data-plasmic-override={overrides.left}
              hasGap={true}
              className={classNames(projectcss.all, sty.left)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oOfb0
                )}
              >
                {"Un viaje panor\u00e1mico,\nun viaje m\u00e1s ecol\u00f3gico"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uXzYw
                )}
              >
                {
                  "Abre los ojos para disfrutar cada segundo de tu camino con vistas inaccesibles desde la carretera."
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"right"}
              data-plasmic-override={overrides.right}
              hasGap={true}
              className={classNames(projectcss.all, sty.right)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Hi9B
                )}
              >
                {
                  "Tequila Express es m\u00e1s que una experiencia cultural en Jalisco; tambi\u00e9n es una manera de practicar el turismo responsable, utilizando uno de los medios de transporte m\u00e1s ecol\u00f3gicos mientras descubres el paisaje agavero catalogado por la UNESCO como Patrimonio Cultural de la Humanidad."
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"options"}
            data-plasmic-override={overrides.options}
            hasGap={true}
            className={classNames(projectcss.all, sty.options)}
            id={"recorridos"}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              hasGap={true}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qX3
                )}
              >
                {"Tequila Express integra\nlas experiencias ferroviarias"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y0YC
                )}
              >
                {
                  "Conoce y compara todas las alternativas de tren con destino a Tequila en el mercado. Tequila Express es el sitio oficial en el que el Gobierno del Estado de Jalisco y la iniciativa privada se unen para que puedas conocer los itinerarios y la oferta diferenciada de los diversos operadores por la ruta del tequila."
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"option"}
                data-plasmic-override={overrides.option}
                hasGap={true}
                className={classNames(projectcss.all, sty.option)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tiYpp
                  )}
                >
                  {"Operado Por"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lLdOj
                  )}
                >
                  {"Grupo M\u00e9xico Transportes"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vvrjw
                  )}
                >
                  {
                    "El transporte directo destino Tequila para quienes buscan disfrutar su trayecto y libertad en su itinerario."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"option2"}
                data-plasmic-override={overrides.option2}
                hasGap={true}
                className={classNames(projectcss.all, sty.option2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__grrNa
                  )}
                >
                  {"Operado Por"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tdLjj
                  )}
                >
                  {"C\u00e1mara de Comercio de Guadalajara"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ga9SW
                  )}
                >
                  {
                    "La ruta del tequila en colaboraci\u00f3n con Casa Sauza, donde la cultura y la gastronom\u00eda se entrelazan."
                  }
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frequentQuestions"}
            data-plasmic-override={overrides.frequentQuestions}
            hasGap={true}
            className={classNames(projectcss.all, sty.frequentQuestions)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              hasGap={true}
              className={classNames(projectcss.all, sty.title2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wkBk
                )}
              >
                {hasVariant(globalVariants, "screen", "medium")
                  ? "Si\u00e9ntete acompa\u00f1ado\nen el camino"
                  : "Si\u00e9ntete acompa\u00f1ado en el camino"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cBqIt
                )}
              >
                {
                  "Encuentra las respuestas a las preguntas m\u00e1s frecuentes."
                }
              </div>
            </Stack__>
            {(() => {
              const child$Props = {
                activeKey: generateStateValueProp($state, [
                  "accordion",
                  "activePanelId"
                ]),
                bordered: true,
                className: classNames("__wab_instance", sty.accordion),
                defaultActiveKey: "1",
                ghost: true,
                items: (
                  <React.Fragment>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem___608Ja
                      )}
                      id={1}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vsfwL
                          )}
                        >
                          {
                            "\u00bfQu\u00e9 opciones de recorridos ofrece el Tequila Express?"
                          }
                        </div>
                      }
                      showArrow={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6BSs
                        )}
                      >
                        {
                          "El Tequila Express ofrece varias opciones de itinerarios operados por diferentes socios, incluyendo Grupo M\u00e9xico Transportes y la C\u00e1mara de Comercio de Guadalajara. Cada recorrido tiene caracter\u00edsticas \u00fanicas como visitas a campos agaveros, degustaciones de tequila y espect\u00e1culos culturales."
                        }
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__bTqXd
                      )}
                      id={"2"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jwjwW
                          )}
                        >
                          {
                            "\u00bfCu\u00e1les son las fechas y horarios de salida del Tequila Express?"
                          }
                        </div>
                      }
                      showArrow={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zacNp
                        )}
                      >
                        {
                          "Los recorridos generalmente est\u00e1n disponibles los s\u00e1bados, con algunas salidas adicionales los viernes y domingos, dependiendo del operador. Los horarios espec\u00edficos de salida y regreso var\u00edan seg\u00fan el itinerario seleccionado."
                        }
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__t1An
                      )}
                      id={"3"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q44X
                          )}
                        >
                          {
                            "\u00bfQu\u00e9 debo llevar para mi viaje en el Tequila Express?"
                          }
                        </div>
                      }
                      showArrow={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qgKfx
                        )}
                      >
                        {
                          "Se recomienda llevar identificaci\u00f3n oficial, copia de la confirmaci\u00f3n de reserva, zapato cerrado y c\u00f3modo, lentes de sol, sombrero, ropa c\u00f3moda, y protector solar. Para mayor comodidad, tambi\u00e9n se sugiere llevar una botella de agua."
                        }
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__wCamZ
                      )}
                      id={"4"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p43O9
                          )}
                        >
                          {
                            "\u00bfEs posible cambiar o cancelar mi reservaci\u00f3n?"
                          }
                        </div>
                      }
                      showArrow={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c8No2
                        )}
                      >
                        {
                          "Las pol\u00edticas de cambios y cancelaciones dependen del operador con el que se haya hecho la reserva. Se recomienda revisar los t\u00e9rminos y condiciones al momento de la compra o contactarnos directamente para obtener m\u00e1s informaci\u00f3n."
                        }
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__mmwmd
                      )}
                      id={"5"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hb6CU
                          )}
                        >
                          {
                            "\u00bfExisten opciones de recorrido en ingl\u00e9s?"
                          }
                        </div>
                      }
                      showArrow={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u3YoF
                        )}
                      >
                        {
                          "S\u00ed, algunos itinerarios y servicios est\u00e1n disponibles en ingl\u00e9s para facilitar la experiencia de los visitantes extranjeros."
                        }
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__tbyi3
                      )}
                      id={"6"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qmzxA
                          )}
                        >
                          {
                            "\u00bfC\u00f3mo puedo reservar mi lugar en el Tequila Express?"
                          }
                        </div>
                      }
                      showArrow={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kmsc0
                        )}
                      >
                        {
                          "Al seleccionar un itinerario, ser\u00e1s redirigido al sistema de reservaciones del operador correspondiente para completar tu compra."
                        }
                      </div>
                    </AntdAccordionItem>
                  </React.Fragment>
                ),

                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "activePanelId",
                  ["accordion", "activePanelId"],
                  AntdAccordion_Helpers
                )
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "activePanelId",
                    plasmicStateName: "accordion.activePanelId"
                  }
                ],

                [],
                AntdAccordion_Helpers ?? {},
                child$Props
              );
              return (
                <AntdAccordion
                  data-plasmic-name={"accordion"}
                  data-plasmic-override={overrides.accordion}
                  {...child$Props}
                />
              );
            })()}
          </Stack__>
          <div
            data-plasmic-name={"promoBanner"}
            data-plasmic-override={overrides.promoBanner}
            className={classNames(projectcss.all, sty.promoBanner)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"banner"}
              data-plasmic-override={overrides.banner}
              hasGap={true}
              className={classNames(projectcss.all, sty.banner)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zSBkQ
                )}
              >
                {"Una aut\u00e9ntica experiencia mexicana"}
              </div>
              <Button2
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                label={"Sobre Nosotros"}
                onClick={async () => {
                  const $steps = {};
                  $steps["goToNosotros"] = true
                    ? (() => {
                        const actionArgs = { destination: `/nosotros` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToNosotros"] != null &&
                    typeof $steps["goToNosotros"] === "object" &&
                    typeof $steps["goToNosotros"].then === "function"
                  ) {
                    $steps["goToNosotros"] = await $steps["goToNosotros"];
                  }
                }}
              />
            </Stack__>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "mainHeader",
    "sliderCarousel",
    "slide2",
    "slide1",
    "slide3",
    "stats",
    "left",
    "right",
    "options",
    "title",
    "container",
    "option",
    "option2",
    "frequentQuestions",
    "title2",
    "accordion",
    "promoBanner",
    "banner",
    "button2",
    "footer"
  ],

  mainHeader: ["mainHeader"],
  sliderCarousel: ["sliderCarousel", "slide2", "slide1", "slide3"],
  slide2: ["slide2"],
  slide1: ["slide1"],
  slide3: ["slide3"],
  stats: ["stats", "left", "right"],
  left: ["left"],
  right: ["right"],
  options: ["options", "title", "container", "option", "option2"],
  title: ["title"],
  container: ["container", "option", "option2"],
  option: ["option"],
  option2: ["option2"],
  frequentQuestions: ["frequentQuestions", "title2", "accordion"],
  title2: ["title2"],
  accordion: ["accordion"],
  promoBanner: ["promoBanner", "banner", "button2"],
  banner: ["banner", "button2"],
  button2: ["button2"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInicio__ArgProps,
          internalVariantPropNames: PlasmicInicio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInicio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicInicio";
  } else {
    func.displayName = `PlasmicInicio.${nodeName}`;
  }
  return func;
}

export const PlasmicInicio = Object.assign(
  // Top-level PlasmicInicio renders the root element
  makeNodeComponent("mainSection"),
  {
    // Helper components rendering sub-elements
    mainHeader: makeNodeComponent("mainHeader"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    slide2: makeNodeComponent("slide2"),
    slide1: makeNodeComponent("slide1"),
    slide3: makeNodeComponent("slide3"),
    stats: makeNodeComponent("stats"),
    left: makeNodeComponent("left"),
    right: makeNodeComponent("right"),
    options: makeNodeComponent("options"),
    title: makeNodeComponent("title"),
    container: makeNodeComponent("container"),
    option: makeNodeComponent("option"),
    option2: makeNodeComponent("option2"),
    frequentQuestions: makeNodeComponent("frequentQuestions"),
    title2: makeNodeComponent("title2"),
    accordion: makeNodeComponent("accordion"),
    promoBanner: makeNodeComponent("promoBanner"),
    banner: makeNodeComponent("banner"),
    button2: makeNodeComponent("button2"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicInicio
    internalVariantProps: PlasmicInicio__VariantProps,
    internalArgProps: PlasmicInicio__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInicio;
/* prettier-ignore-end */
